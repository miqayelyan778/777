import os
import json
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, JobQueue
from keep_alive import keep_alive
from dotenv import load_dotenv

# ’ç’Ø’Ω’•’¨ keep_alive server-’® Render.com-’´ ’∞’°’¥’°÷Ä
keep_alive()

# ‘≤’•’º’∂’•’¨ environment ÷É’∏÷É’∏’≠’°’Ø’°’∂’∂’•÷Ä’®
load_dotenv()

# ‘ø’∏’∂÷Ü’´’£’∏÷Ç÷Ä’°÷Å’´’°
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BLOCKCHAIR_API_KEY = os.getenv('BLOCKCHAIR_API_KEY', '')  # ’à’π ’∫’°÷Ä’ø’°’§’´÷Ä
STORAGE_FILE = 'storage.json'
CHECK_INTERVAL = 30  # ’æ’°’µ÷Ä’Ø’µ’°’∂

def load_storage():
    """‘≤’•’º’∂’•’¨ ’∫’°’∞’•’Ω’ø’°’æ’∏÷Ä’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’®"""
    try:
        with open(STORAGE_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'users': {}}

def save_storage(data):
    """’ä’°’∞’∫’°’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®"""
    with open(STORAGE_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def is_valid_dash_address(address):
    """’ç’ø’∏÷Ç’£’•’¨ Dash ’∞’°’Ω÷Å’•’´ ’æ’°’æ’•÷Ä’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’®"""
    return address.startswith('X') and len(address) == 34

def get_dash_transactions(address):
    """’ç’ø’°’∂’°’¨ ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’® Blockchair API-’´÷Å"""
    url = f"https://api.blockchair.com/dash/dashboards/address/{address}"
    if BLOCKCHAIR_API_KEY:
        url += f"?key={BLOCKCHAIR_API_KEY}"
    
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        return data.get('data', {}).get(address, {}).get('transactions', [])
    except Exception as e:
        print(f"Error fetching transactions: {e}")
        return []

def get_dash_price():
    """’ç’ø’°’∂’°’¨ DASH-’´ ’£’´’∂’®"""
    url = "https://api.blockchair.com/dash/stats"
    if BLOCKCHAIR_API_KEY:
        url += f"?key={BLOCKCHAIR_API_KEY}"
    
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        return data.get('data', {}).get('market_price_usd', 0)
    except Exception as e:
        print(f"Error fetching Dash price: {e}")
        return 0

def start(update: Update, context: CallbackContext):
    """’ç’Ø’¶’¢’∂’°’Ø’°’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"""
    update.message.reply_text(
        "üëã ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø Dash Notifier Bot!\n\n"
        "’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä Dash ’∞’°’Ω÷Å’•’∂, ÷á ’•’Ω ’±’•’¶ ’Ø’Æ’°’∂’∏÷Ç÷Å’•’¥ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’´ ’¥’°’Ω’´’∂:\n\n"
        "’ï÷Ä’´’∂’°’Ø’ù XrRrm9GZ8N1YwZKo3ZHFHwT5Mb9dF3mK5E"
    )

def handle_address(update: Update, context: CallbackContext):
    """’Ñ’∑’°’Ø’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’Ø’∏’≤’¥’´÷Å ’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’∞’°’Ω÷Å’•’∂"""
    address = update.message.text.strip()
    chat_id = update.message.chat_id
    
    if not is_valid_dash_address(address):
        update.message.reply_text("‚ùå ‘±’∂’æ’°’æ’•÷Ä ’∞’°’Ω÷Å’•: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’æ’°’æ’•÷Ä Dash ’∞’°’Ω÷Å’• (’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß X-’∏’æ)")
        return
    
    storage = load_storage()
    
    # ’ç’ø’∏÷Ç’£’•’¨ ’°÷Ä’§’µ’∏÷Ñ ’∞’°’Ω÷Å’•’∂ ’°÷Ä’§’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß
    for user_id, user_data in storage['users'].items():
        if user_data.get('address') == address and str(user_id) != str(chat_id):
            update.message.reply_text("‚ùå ‘±’µ’Ω ’∞’°’Ω÷Å’•’∂ ’°÷Ä’§’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß ’°’µ’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’Ø’∏’≤’¥’´÷Å")
            return
    
    # ‘≥÷Ä’°’∂÷Å’•’¨ ’∂’∏÷Ä ’∞’°’Ω÷Å’•
    storage['users'][str(chat_id)] = {
        'address': address,
        'last_tx': None,
        'notifications': []
    }
    
    save_storage(storage)
    update.message.reply_text(f"‚úÖ ’Ä’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß: ‘ø’Æ’°’∂’∏÷Ç÷Å’•’¥ {address} ’∞’°’Ω÷Å’•’´ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’´ ’¥’°’Ω’´’∂")

def check_transactions(context: CallbackContext):
    """’ä’°÷Ä’¢’•÷Ä’°’¢’°÷Ä ’Ω’ø’∏÷Ç’£’•’¨ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’®"""
    storage = load_storage()
    dash_price = get_dash_price()
    
    for chat_id, user_data in storage['users'].items():
        address = user_data['address']
        transactions = get_dash_transactions(address)
        
        if not transactions:
            continue
            
        latest_tx = transactions[0]
        
        if user_data['last_tx'] != latest_tx['hash']:
            if latest_tx['hash'] not in user_data['notifications']:
                send_notification(context.bot, chat_id, latest_tx, dash_price)
                user_data['last_tx'] = latest_tx['hash']
                user_data['notifications'].append(latest_tx['hash'])
                
                # ’ä’°’∞’∫’°’∂’•’¨ ’¥’´’°’µ’∂ ’æ’•÷Ä’ª’´’∂ 100 ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä’®
                if len(user_data['notifications']) > 100:
                    user_data['notifications'] = user_data['notifications'][-100:]
    
    save_storage(storage)

def send_notification(bot, chat_id, transaction, dash_price):
    """’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’´ ’¥’°’Ω’´’∂"""
    tx_time = datetime.fromtimestamp(transaction['time']).strftime('%Y-%m-%d %H:%M')
    dash_amount = transaction['balance_change'] / 100000000  # ’ç’°’ø’∏’∑’´’´÷Å DASH
    usd_value = dash_amount * dash_price
    tx_link = f"https://blockchair.com/dash/transaction/{transaction['hash']}"
    tx_count = len(get_dash_transactions(transaction['address']))
    
    message = (
        f"üì• ’Ü’∏÷Ä ‘≥’∏÷Ä’Æ’°÷Ä÷Ñ #{tx_count}\n\n"
        f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: {dash_amount:.8f} DASH (~${usd_value:.2f})\n"
        f"‚è∞ ‘∫’°’¥’°’∂’°’Ø: {tx_time}\n"
        f"üîó [‘¥’´’ø’•’¨ Blockchair-’∏÷Ç’¥]({tx_link})\n"
        f"üßæ TxID: {transaction['hash'][:8]}..."
    )
    
    keyboard = [[InlineKeyboardButton("‘¥’´’ø’•’¨ ‘≥’∏÷Ä’Æ’°÷Ä÷Ñ’®", url=tx_link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    bot.send_message(
        chat_id=chat_id,
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def main():
    """‘≥’¨’≠’°’æ’∏÷Ä ÷Ü’∏÷Ç’∂’Ø÷Å’´’°"""
    if not TELEGRAM_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN-’® ’Ω’°’∞’¥’°’∂’æ’°’Æ ’π’ß!")
        return
    
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_address))
    
    # ‘±’¥’•’∂ 30 ’æ’°’µ÷Ä’Ø’µ’°’∂’® ’¥’•’Ø ’Ω’ø’∏÷Ç’£’•’¨ ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’®
    jq = updater.job_queue
    jq.run_repeating(check_transactions, interval=CHECK_INTERVAL, first=0)
    
    print("ü§ñ ‘≤’∏’ø’® ’£’∏÷Ä’Æ’°÷Ä’Ø’æ’°’Æ ’ß...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
